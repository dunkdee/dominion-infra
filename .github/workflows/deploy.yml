name: Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}         # ← allow manual runs

jobs:
  ship:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      # Required secrets: SSH_USER, SSH_HOST, SSH_PRIVATE_KEY
      # Optional secrets: SSH_PORT (defaults to 22)
      # Optional environment variable: DEST_PATH (defaults to /opt/infra/)
      - name: Deploy infra to VM (rsync)
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set -euo pipefail

          # Fail early with clear messages if required secrets are missing
          : "${SSH_USER:?SSH_USER is not set. Add repository secret SSH_USER.}"
          : "${SSH_HOST:?SSH_HOST is not set. Add repository secret SSH_HOST.}"
          : "${SSH_PRIVATE_KEY:?SSH_PRIVATE_KEY is not set. Add repository secret SSH_PRIVATE_KEY.}"

          # Default port
          SSH_PORT="${SSH_PORT:-22}"
          echo "Using SSH port ${SSH_PORT}"

          # Prepare ssh key
          mkdir -p ~/.ssh
          umask 077
          printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Populate known_hosts for the host (CI-friendly). For higher security replace this with actions/ssh-known-hosts or pre-populated known_hosts.
          ssh-keyscan -p "${SSH_PORT}" "${SSH_HOST}" > ~/.ssh/known_hosts || true
          chmod 644 ~/.ssh/known_hosts

          DEST_PATH="${DEST_PATH:-/opt/infra/}"

          # Retry rsync up to 3 times to tolerate transient failures
          attempt=0
          max_attempts=3
          until [ $attempt -ge $max_attempts ]
          do
            attempt=$((attempt+1))
            echo "rsync attempt $attempt/$max_attempts..."
            rsync -avz --delete \
              -e "ssh -i ~/.ssh/id_rsa -p ${SSH_PORT} -o BatchMode=yes -o StrictHostKeyChecking=yes" \
              ./infra/ "${SSH_USER}@${SSH_HOST}:${DEST_PATH}" && break
            echo "rsync failed on attempt $attempt"
            sleep $((attempt * 5))
          done

      - name: Compose up
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          SSH_PORT="${SSH_PORT:-22}"
          DEST_PATH="${DEST_PATH:-/opt/infra/}"
          ssh -i ~/.ssh/id_rsa -p "${SSH_PORT}" -o BatchMode=yes -o StrictHostKeyChecking=yes \
            "${SSH_USER}@${SSH_HOST}" \
            "sudo -n docker compose -f ${DEST_PATH}docker-compose.yml up -d"

  smoke-test:
    needs: ship
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - name: Verify deployment
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          set -euo pipefail

          # Fail early with clear messages if required secrets are missing
          : "${SSH_USER:?SSH_USER is not set. Add repository secret SSH_USER.}"
          : "${SSH_HOST:?SSH_HOST is not set. Add repository secret SSH_HOST.}"
          : "${SSH_PRIVATE_KEY:?SSH_PRIVATE_KEY is not set. Add repository secret SSH_PRIVATE_KEY.}"

          # Default port
          SSH_PORT="${SSH_PORT:-22}"
          echo "Using SSH port ${SSH_PORT} for smoke test"

          # Prepare ssh key
          mkdir -p ~/.ssh
          umask 077
          printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Populate known_hosts for the host (CI-friendly)
          ssh-keyscan -p "${SSH_PORT}" "${SSH_HOST}" > ~/.ssh/known_hosts || true
          chmod 644 ~/.ssh/known_hosts

          DEST_PATH="${DEST_PATH:-/opt/infra/}"

          # Verify that the destination path exists and contains expected files
          echo "Verifying deployment at ${DEST_PATH}..."
          ssh -i ~/.ssh/id_rsa -p "${SSH_PORT}" -o BatchMode=yes -o StrictHostKeyChecking=yes \
            "${SSH_USER}@${SSH_HOST}" \
            "test -d ${DEST_PATH} && test -f ${DEST_PATH}docker-compose.yml && echo 'Deployment verified successfully'"
